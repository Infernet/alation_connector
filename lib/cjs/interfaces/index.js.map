{"version":3,"sources":["../../../src/interfaces/index.ts"],"names":[],"mappings":";;;;;;AAQA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {AxiosInstance, AxiosRequestConfig, Method} from 'axios';\nimport {ICreateData, ICreateKey, ICreateRecord} from './create';\nimport {AlationEntityId, Flag} from '../types';\nimport {IJob, IJobFinish, IJobState} from './job';\nimport {IAlationEntity} from './entity';\nimport {IAlationUpdateBase, IUpdateResponse} from './update';\nimport {ICustomFieldValue, ICustomFieldValueDeleteResponse, ICustomFieldValueResponse} from './custom_field';\n\nexport * from './connector';\nexport * from './create';\nexport * from './entity';\nexport * from './job';\nexport * from './update';\nexport * from './custom_field';\n\nexport interface IConnectorConfig {\n  jobInterval: number;\n  tokenName: string;\n  tokenStoragePath: string;\n}\n\nexport interface IRequestConfig extends AxiosRequestConfig {\n  url: string;\n  method: Method;\n}\n\nexport interface IPageResponse<Values extends IAlationEntity> {\n  values: Array<Values>;\n  next: (() => Promise<IPageResponse<Values>>) | null;\n}\n\nexport interface IConnector {\n  apiClient: AxiosInstance;\n  options: IConnectorConfig;\n}\n\nexport interface IModel {\n  getJobState(job: IJob): Promise<IJobState>;\n\n  getJobResult(job: IJob, interval?: number): Promise<IJobFinish>;\n\n  updateCustomFieldsValue<V = any>(body: ICustomFieldValue<V>): Promise<ICustomFieldValueResponse<V>>;\n\n  deleteCustomFieldValue(id: AlationEntityId): Promise<ICustomFieldValueDeleteResponse>;\n\n  getPagesData<E extends IAlationEntity>(config: IRequestConfig): Promise<IPageResponse<E>>;\n\n  getAllData<E extends IAlationEntity>(config: IRequestConfig): Promise<Array<E>>;\n}\n\nexport interface IEntityModel<E extends IAlationEntity, U extends IAlationUpdateBase, S, CKey extends ICreateKey, CData extends ICreateData> {\n  getById(id: AlationEntityId): Promise<E | null>;\n\n  search(params?: S): Promise<IPageResponse<E>>;\n\n  search(params: S, all: Flag): Promise<Array<E>>;\n\n  search(params: S, limit: number): Promise<IPageResponse<E>>;\n\n  search(params: S, limit: number, all: Flag): Promise<Array<E>>;\n\n  create(dsId: number, key: CKey, data: CData): Promise<IJob>;\n\n  create(dsId: number, key: CKey, data: CData, wait: Flag): Promise<IJobFinish>;\n\n  create(dsId: number, entities: ICreateRecord<CKey, CData>[]): Promise<IJob>;\n\n  create(dsId: number, entities: ICreateRecord<CKey, CData>[], wait: Flag): Promise<IJobFinish>;\n\n  create(dsId: number, entities: ICreateRecord<CKey, CData>[], limit: number): Promise<IJob[]>;\n\n  create(dsId: number, entities: ICreateRecord<CKey, CData>[], limit: number, wait: Flag): Promise<IJobFinish[]>;\n\n  update(records: U, limit?: number): Promise<IUpdateResponse>;\n\n  update(records: U[], limit?: number): Promise<IUpdateResponse>;\n}\n"],"file":"index.js"}