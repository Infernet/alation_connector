{"version":3,"sources":["../../../src/classes/AbstractModel.ts"],"names":["AbstractModel","constructor","core","apiClient","entityType","getById","bind","search","create","update","makeEntityKey","id","data","get","ALATION_CATALOG_ROUTE","params","length","error","console","message","records","limit","Array","isArray","pages","response","new_objects","updated_objects","number_received","error_objects","page","post","ALATION_UPDATE_ROUTE","join","body","config","all","getAllData","url","method","getPagesData","dsId","key","wait","entityKey","entityData","job","JSON","stringify","getJobResult","paramsCollection","map","k","d","jobCollection","push","Promise","e"],"mappings":"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","sourcesContent":["import {AxiosInstance} from 'axios';\nimport {AlationEntityType, IEntityModel, IModel} from '..';\nimport {ALATION_CATALOG_ROUTE, ALATION_UPDATE_ROUTE, alationCreateRoute} from '../constants';\nimport {prepareApiBody, sliceCollection} from '../helpers';\nimport {\n  IAlationEntity,\n  IAlationUpdateBase,\n  ICreateData,\n  ICreateKey,\n  ICreateRecord,\n  IJob,\n  IJobFinish,\n  IPageResponse,\n  IUpdateResponse,\n} from '../interfaces';\nimport {AlationEntityId, AlationKey, Flag} from '../types';\n\nexport abstract class AbstractModel<Entity extends IAlationEntity,\n    Update extends IAlationUpdateBase,\n    Search,\n    CreateKey extends ICreateKey,\n    CreateData extends ICreateData>\nimplements IEntityModel<Entity, Update, Search, CreateKey, CreateData> {\n  protected core: IModel;\n  protected apiClient: AxiosInstance;\n  protected entityType: AlationEntityType;\n\n  protected constructor(core: IModel, apiClient: AxiosInstance, entityType: AlationEntityType) {\n    this.core = core;\n    this.apiClient = apiClient;\n    this.entityType = entityType;\n\n    // публичные методы\n    this.getById = this.getById.bind(this);\n    this.search = this.search.bind(this);\n    this.create = this.create.bind(this);\n    this.update = this.update.bind(this);\n    // вспомогательные методы\n    this.makeEntityKey = this.makeEntityKey.bind(this);\n  }\n\n  async getById<E extends Entity = Entity>(id: AlationEntityId): Promise<E | null> {\n    try {\n      const {data} = await this.apiClient.get<E[]>(ALATION_CATALOG_ROUTE[this.entityType], {params: {id}});\n\n      return data.length ? data[0] : null;\n    } catch (error) {\n      console.error('CODE00000300 getById(): ' + error?.message);\n      return null;\n    }\n  }\n\n  async update<U extends Update = Update>(records: U, limit?: number): Promise<IUpdateResponse>;\n  async update<U extends Update = Update>(records: U[], limit?: number): Promise<IUpdateResponse>;\n  async update<U extends Update = Update>(records: U[] | U, limit = 100): Promise<IUpdateResponse> {\n    try {\n      if (Array.isArray(records)) {\n        const pages = sliceCollection(prepareApiBody<Update>(records), limit);\n        let response: IUpdateResponse = {\n          new_objects: 0,\n          updated_objects: 0,\n          number_received: 0,\n          error: '',\n          error_objects: [],\n        };\n        for (const page of pages) {\n          const {data} = await this.apiClient.post<IUpdateResponse>(ALATION_UPDATE_ROUTE[this.entityType], page.join('\\n'));\n          response = {\n            new_objects: response.new_objects + data.new_objects,\n            updated_objects: response.updated_objects + data.updated_objects,\n            number_received: response.number_received + data.number_received,\n            error: response.error + data.error,\n            error_objects: [...response.error_objects, ...data.error_objects],\n          };\n        }\n\n        return response;\n      } else {\n        const body = prepareApiBody<Update>(records);\n        const {data} = await this.apiClient.post<IUpdateResponse>(ALATION_UPDATE_ROUTE[this.entityType], body);\n        return data;\n      }\n    } catch (error) {\n      console.error('CODE00000301 update(): ' + error?.message);\n      throw error;\n    }\n  }\n\n  async search<E extends Entity = Entity, S extends Search = Search>(config?: S): Promise<IPageResponse<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, all: Flag): Promise<Array<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config?: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    try {\n      if (!config) {\n        return this.core.getAllData({\n          url: ALATION_CATALOG_ROUTE[this.entityType],\n          method: 'get',\n        });\n      }\n      if (typeof limit === 'boolean' && limit) {\n        return this.core.getAllData<E>({\n          url: ALATION_CATALOG_ROUTE[this.entityType],\n          method: 'get',\n          params: config,\n        });\n      }\n      if (typeof limit === 'number' && limit > 0) {\n        if (typeof all === 'boolean' && all) {\n          return this.core.getAllData<E>({\n            url: ALATION_CATALOG_ROUTE[this.entityType],\n            method: 'get',\n            params: {...config, limit},\n          });\n        }\n        return this.core.getPagesData<E>({\n          url: ALATION_CATALOG_ROUTE[this.entityType],\n          method: 'get',\n          params: {...config, limit},\n        });\n      }\n      return this.core.getPagesData<E>({\n        url: ALATION_CATALOG_ROUTE[this.entityType],\n        method: 'get',\n        params: config,\n      });\n    } catch (error) {\n      console.error('CODE00000302 search(): ' + error?.message);\n      return [];\n    }\n  }\n\n  async create<CD extends CreateData = CreateData>(dsId: number, key: CreateKey, data: CD): Promise<IJob>;\n  async create<CD extends CreateData = CreateData>(dsId: number, key: CreateKey, data: CD, wait: Flag): Promise<IJobFinish>;\n  async create<CD extends CreateData = CreateData>(dsId: number, entities: ICreateRecord<CreateKey, CD>[]): Promise<IJob>;\n  async create<CD extends CreateData = CreateData>(dsId: number, entities: ICreateRecord<CreateKey, CD>[], wait: Flag): Promise<IJobFinish>;\n  async create<CD extends CreateData = CreateData>(dsId: number, entities: ICreateRecord<CreateKey, CD>[], limit: number): Promise<IJob[]>;\n  async create<CD extends CreateData = CreateData>(dsId: number, entities: ICreateRecord<CreateKey, CD>[], limit: number, wait: Flag): Promise<IJobFinish[]>;\n  async create<CD extends CreateData = CreateData>(dsId: number,\n      key: CreateKey | ICreateRecord<CreateKey, CD>[],\n      data?: CD | Flag | number,\n      wait?: Flag): Promise<IJob | IJobFinish | IJob[] | IJobFinish[]> {\n    try {\n      if (!Array.isArray(key)) {\n        const entityKey = this.makeEntityKey(dsId, key);\n        const entityData = data as CD;\n\n        const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), JSON.stringify({key: entityKey, ...entityData}));\n\n        return wait ? this.core.getJobResult(job) : job;\n      } else {\n        const paramsCollection = key.map<string>(({key: k, data: d}) => (JSON.stringify({\n          key: this.makeEntityKey(dsId, k),\n          ...d,\n        })));\n        if (typeof data === 'boolean') {\n          const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), paramsCollection.join('\\n'));\n          return this.core.getJobResult(job);\n        }\n        const pages = sliceCollection<string>(paramsCollection, data as number);\n\n        const jobCollection: Array<IJob> = [];\n        for (const page of pages) {\n          const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), page.join('\\n'));\n          jobCollection.push(job);\n        }\n\n        if (typeof wait === 'boolean') {\n          return await Promise.all<IJobFinish>(jobCollection.map<Promise<IJobFinish>>((job) => (this.core.getJobResult(job))));\n        } else {\n          return jobCollection;\n        }\n      }\n    } catch (e) {\n      console.error('CODE00000303 create(): ', e?.message);\n      throw e;\n    }\n  }\n\n  protected abstract makeEntityKey(datasourceId: number, key: CreateKey): AlationKey;\n}\n\n"],"file":"AbstractModel.js"}