{"version":3,"sources":["../../../src/classes/AbstractModel.ts"],"names":["AbstractModel","constructor","core","apiClient","entityType","getById","id","data","get","ALATION_CATALOG_ROUTE","params","length","error","console","message","update","records","limit","Array","isArray","pages","response","new_objects","updated_objects","number_received","error_objects","page","post","ALATION_UPDATE_ROUTE","join","body","search","config","all","getAllData","url","method","getPagesData","create","dsId","key","wait","entityKey","makeEntityKey","entityData","job","JSON","stringify","getJobResult","paramsCollection","map","k","d","jobCollection","push","Promise","e","result","values","next","headers","ALATION_NEXT_PAGE_HEADER_KEY","updateCustomFields","otype","OBJECT_TYPE","record","CUSTOM_FIELD_VALUE_EDIT_ROUTE"],"mappings":";;;;;;;AAEA;;AAQA;;AAmBO,MAAeA,aAAf,CAC8C;AAKzCC,EAAAA,WAAW,CAACC,IAAD,EAAgBC,SAAhB,EAA0CC,UAA1C,EAAyE;AAC5F,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEY,QAAPC,OAAO,CAA4BC,EAA5B,EAAoE;AAC/E,QAAI;AACF,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAM,KAAKJ,SAAL,CAAeK,GAAf,CAAwBC,iCAAsB,KAAKL,UAA3B,CAAxB,EAAgE;AAACM,QAAAA,MAAM,EAAE;AAACJ,UAAAA;AAAD;AAAT,OAAhE,CAArB;AAEA,aAAOC,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAAC,CAAD,CAAlB,GAAwB,IAA/B;AACD,KAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAA6BA,KAA7B,aAA6BA,KAA7B,uBAA6BA,KAAK,CAAEE,OAApC,CAAd;AACA,aAAO,IAAP;AACD;AACF;;AAIW,QAANC,MAAM,CAAwCC,OAAxC,EAA0DC,KAAK,GAAG,GAAlE,EAAiG;AAC3G,QAAI;AACF,UAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC1B,cAAMI,KAAK,GAAG,8BAAgB,6BAAkBJ,OAAlB,CAAhB,EAA4CC,KAA5C,CAAd;AACA,YAAII,QAAyB,GAAG;AAC9BC,UAAAA,WAAW,EAAE,CADiB;AAE9BC,UAAAA,eAAe,EAAE,CAFa;AAG9BC,UAAAA,eAAe,EAAE,CAHa;AAI9BZ,UAAAA,KAAK,EAAE,EAJuB;AAK9Ba,UAAAA,aAAa,EAAE;AALe,SAAhC;;AAOA,aAAK,MAAMC,IAAX,IAAmBN,KAAnB,EAA0B;AACxB,gBAAM;AAACb,YAAAA;AAAD,cAAS,MAAM,KAAKJ,SAAL,CAAewB,IAAf,CAAqCC,gCAAqB,KAAKxB,UAA1B,CAArC,EAA4EsB,IAAI,CAACG,IAAL,CAAU,IAAV,CAA5E,CAArB;AACAR,UAAAA,QAAQ,GAAG;AACTC,YAAAA,WAAW,EAAED,QAAQ,CAACC,WAAT,GAAuBf,IAAI,CAACe,WADhC;AAETC,YAAAA,eAAe,EAAEF,QAAQ,CAACE,eAAT,GAA2BhB,IAAI,CAACgB,eAFxC;AAGTC,YAAAA,eAAe,EAAEH,QAAQ,CAACG,eAAT,GAA2BjB,IAAI,CAACiB,eAHxC;AAITZ,YAAAA,KAAK,EAAES,QAAQ,CAACT,KAAT,GAAiBL,IAAI,CAACK,KAJpB;AAKTa,YAAAA,aAAa,EAAE,CAAC,GAAGJ,QAAQ,CAACI,aAAb,EAA4B,GAAGlB,IAAI,CAACkB,aAApC;AALN,WAAX;AAOD;;AAED,eAAOJ,QAAP;AACD,OArBD,MAqBO;AACL,cAAMS,IAAI,GAAG,6BAAkBd,OAAlB,CAAb;AACA,cAAM;AAACT,UAAAA;AAAD,YAAS,MAAM,KAAKJ,SAAL,CAAewB,IAAf,CAAqCC,gCAAqB,KAAKxB,UAA1B,CAArC,EAA4E0B,IAA5E,CAArB;AACA,eAAOvB,IAAP;AACD;AACF,KA3BD,CA2BE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAA4BA,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEE,OAAnC,CAAd;AACA,YAAMF,KAAN;AACD;AACF;;AAMW,QAANmB,MAAM,CAAsBC,MAAtB,EAAiCf,KAAjC,EAAwDgB,GAAxD,EAAqG;AAC/G,QAAI;AACF,UAAI,OAAOhB,KAAP,KAAiB,SAAjB,IAA8BA,KAAlC,EAAyC;AACvC,eAAO,KAAKiB,UAAL,CAAmB;AACxBC,UAAAA,GAAG,EAAE1B,iCAAsB,KAAKL,UAA3B,CADmB;AAExBgC,UAAAA,MAAM,EAAE,KAFgB;AAGxB1B,UAAAA,MAAM,EAAEsB;AAHgB,SAAnB,CAAP;AAKD;;AACD,UAAI,OAAOf,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C,YAAI,OAAOgB,GAAP,KAAe,SAAf,IAA4BA,GAAhC,EAAqC;AACnC,iBAAO,KAAKC,UAAL,CAAmB;AACxBC,YAAAA,GAAG,EAAE1B,iCAAsB,KAAKL,UAA3B,CADmB;AAExBgC,YAAAA,MAAM,EAAE,KAFgB;AAGxB1B,YAAAA,MAAM,EAAE,EAAC,GAAGsB,MAAJ;AAAYf,cAAAA;AAAZ;AAHgB,WAAnB,CAAP;AAKD;;AACD,eAAO,KAAKoB,YAAL,CAAqB;AAC1BF,UAAAA,GAAG,EAAE1B,iCAAsB,KAAKL,UAA3B,CADqB;AAE1BgC,UAAAA,MAAM,EAAE,KAFkB;AAG1B1B,UAAAA,MAAM,EAAE,EAAC,GAAGsB,MAAJ;AAAYf,YAAAA;AAAZ;AAHkB,SAArB,CAAP;AAKD;;AACD,aAAO,KAAKoB,YAAL,CAAqB;AAC1BF,QAAAA,GAAG,EAAE1B,iCAAsB,KAAKL,UAA3B,CADqB;AAE1BgC,QAAAA,MAAM,EAAE,KAFkB;AAG1B1B,QAAAA,MAAM,EAAEsB;AAHkB,OAArB,CAAP;AAKD,KA3BD,CA2BE,OAAOpB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAA4BA,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEE,OAAnC,CAAd;AACA,aAAO,EAAP;AACD;AACF;;AAQW,QAANwB,MAAM,CACRC,IADQ,EACMC,GADN,EACsCjC,IADtC,EACgEkC,IADhE,EACiI;AAC3I,QAAI;AACF,UAAI,CAACvB,KAAK,CAACC,OAAN,CAAcqB,GAAd,CAAL,EAAyB;AACvB,cAAME,SAAS,GAAG,KAAKC,aAAL,CAAmBJ,IAAnB,EAAyBC,GAAzB,CAAlB;AACA,cAAMI,UAAU,GAAGrC,IAAnB;AAEA,cAAM;AAACA,UAAAA,IAAI,EAAEsC;AAAP,YAAc,MAAM,KAAK1C,SAAL,CAAewB,IAAf,CAA0B,mCAAmBY,IAAnB,CAA1B,EAAoDO,IAAI,CAACC,SAAL,CAAe;AAACP,UAAAA,GAAG,EAAEE,SAAN;AAAiB,aAAGE;AAApB,SAAf,CAApD,CAA1B;AAEA,eAAOH,IAAI,GAAG,KAAKvC,IAAL,CAAU8C,YAAV,CAAuBH,GAAvB,CAAH,GAAiCA,GAA5C;AACD,OAPD,MAOO;AACL,cAAMI,gBAAgB,GAAGT,GAAG,CAACU,GAAJ,CAAgB,CAAC;AAACV,UAAAA,GAAG,EAAEW,CAAN;AAAS5C,UAAAA,IAAI,EAAE6C;AAAf,SAAD,KAAwBN,IAAI,CAACC,SAAL,CAAe;AAC9EP,UAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBJ,IAAnB,EAAyBY,CAAzB,CADyE;AAE9E,aAAGC;AAF2E,SAAf,CAAxC,CAAzB;;AAIA,YAAI,OAAO7C,IAAP,KAAgB,SAApB,EAA+B;AAC7B,gBAAM;AAACA,YAAAA,IAAI,EAAEsC;AAAP,cAAc,MAAM,KAAK1C,SAAL,CAAewB,IAAf,CAA0B,mCAAmBY,IAAnB,CAA1B,EAAoDU,gBAAgB,CAACpB,IAAjB,CAAsB,IAAtB,CAApD,CAA1B;AACA,iBAAO,KAAK3B,IAAL,CAAU8C,YAAV,CAAuBH,GAAvB,CAAP;AACD;;AACD,cAAMzB,KAAK,GAAG,8BAAwB6B,gBAAxB,EAA0C1C,IAA1C,CAAd;AAEA,cAAM8C,aAA0B,GAAG,EAAnC;;AACA,aAAK,MAAM3B,IAAX,IAAmBN,KAAnB,EAA0B;AACxB,gBAAM;AAACb,YAAAA,IAAI,EAAEsC;AAAP,cAAc,MAAM,KAAK1C,SAAL,CAAewB,IAAf,CAA0B,mCAAmBY,IAAnB,CAA1B,EAAoDb,IAAI,CAACG,IAAL,CAAU,IAAV,CAApD,CAA1B;AACAwB,UAAAA,aAAa,CAACC,IAAd,CAAmBT,GAAnB;AACD;;AAED,YAAI,OAAOJ,IAAP,KAAgB,SAApB,EAA+B;AAC7B,iBAAO,MAAMc,OAAO,CAACtB,GAAR,CAAwBoB,aAAa,CAACH,GAAd,CAAwCL,GAAD,IAAU,KAAK3C,IAAL,CAAU8C,YAAV,CAAuBH,GAAvB,CAAjD,CAAxB,CAAb;AACD,SAFD,MAEO;AACL,iBAAOQ,aAAP;AACD;AACF;AACF,KA/BD,CA+BE,OAAOG,CAAP,EAAU;AACV3C,MAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyC4C,CAAzC,aAAyCA,CAAzC,uBAAyCA,CAAC,CAAE1C,OAA5C;AACA,YAAM0C,CAAN;AACD;AACF;;AAIyB,QAAVtB,UAAU,CAA4BF,MAA5B,EAAuE;AAC/F,QAAI;AACF,YAAMyB,MAAgB,GAAG,EAAzB;AAEA,UAAIpC,QAAQ,GAAG,MAAM,KAAKgB,YAAL,CAAqBL,MAArB,CAArB;AACAyB,MAAAA,MAAM,CAACH,IAAP,CAAY,GAAGjC,QAAQ,CAACqC,MAAxB;;AAEA,aAAOrC,QAAQ,CAACsC,IAAhB,EAAsB;AACpBtC,QAAAA,QAAQ,GAAG,MAAMA,QAAQ,CAACsC,IAAT,EAAjB;AACAF,QAAAA,MAAM,CAACH,IAAP,CAAY,GAAGjC,QAAQ,CAACqC,MAAxB;AACD;;AAED,aAAOD,MAAP;AACD,KAZD,CAYE,OAAOD,CAAP,EAAU;AACV3C,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6C4C,CAA7C,aAA6CA,CAA7C,uBAA6CA,CAAC,CAAE1C,OAAhD;AACA,YAAM0C,CAAN;AACD;AACF;;AAE2B,QAAZnB,YAAY,CAA4BL,MAA5B,EAA+E;AACzG,QAAI;AACF,YAAMX,QAAQ,GAAG,MAAO,KAAKlB,SAAL,CAAe6B,MAAf,CAAxB;AACA,YAAM2B,IAAwB,GAAGtC,QAAQ,CAACuC,OAAT,CAAiBC,uCAAjB,CAAjC;AAEA,aAAO;AACLH,QAAAA,MAAM,EAAErC,QAAQ,CAACd,IADZ;AAELoD,QAAAA,IAAI,EAAEA,IAAI,GAAG,MAAO,KAAKtB,YAAL,CAAkB,EAAC,GAAGL,MAAJ;AAAYG,UAAAA,GAAG,EAAEwB;AAAjB,SAAlB,CAAV,GAAuD;AAF5D,OAAP;AAID,KARD,CAQE,OAAOH,CAAP,EAAU;AACV3C,MAAAA,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+C4C,CAA/C,aAA+CA,CAA/C,uBAA+CA,CAAC,CAAE1C,OAAlD;AACA,YAAM0C,CAAN;AACD;AACF;;AAIuB,QAAlBM,kBAAkB,CAAUhC,IAAV,EAA6H;AACnJ,QAAI;AACF,YAAMiC,KAAK,GAAGC,uBAAY,KAAK5D,UAAjB,CAAd;AACA,UAAIM,MAAJ;;AACA,UAAI,CAACQ,KAAK,CAACC,OAAN,CAAcW,IAAd,CAAL,EAA0B;AACxBpB,QAAAA,MAAM,GAAGoC,IAAI,CAACC,SAAL,CAAgB,EAAC,GAAGjB,IAAJ;AAAUiC,UAAAA;AAAV,SAAhB,CAAT;AACD,OAFD,MAEO;AACLrD,QAAAA,MAAM,GAAGoB,IAAI,CAACoB,GAAL,CAAkBe,MAAD,IAAYnB,IAAI,CAACC,SAAL,CAAgB,EAAC,GAAGkB,MAAJ;AAAYF,UAAAA;AAAZ,SAAhB,CAA7B,EAA4FlC,IAA5F,CAAiG,IAAjG,CAAT;AACD;;AACD,YAAM;AAACtB,QAAAA;AAAD,UAAS,MAAM,KAAKJ,SAAL,CAAewB,IAAf,CAAmDuC,wCAAnD,EAAkFxD,MAAlF,CAArB;AACA,aAAOH,IAAP;AACD,KAVD,CAUE,OAAOiD,CAAP,EAAU;AACV3C,MAAAA,OAAO,CAACD,KAAR,CAAc,yCAAwC4C,CAAxC,aAAwCA,CAAxC,uBAAwCA,CAAC,CAAE1C,OAA3C,CAAd;AACA,YAAM0C,CAAN;AACD;AACF;;AAlMkD","sourcesContent":["import {AxiosInstance, AxiosPromise} from 'axios';\nimport {Alation, AlationEntityType} from '..';\nimport {\n  ALATION_CATALOG_ROUTE,\n  ALATION_NEXT_PAGE_HEADER_KEY,\n  ALATION_UPDATE_ROUTE,\n  alationCreateRoute,\n  CUSTOM_FIELD_VALUE_EDIT_ROUTE,\n  OBJECT_TYPE,\n} from '../constants';\nimport {prepareApiBody, sliceCollection} from '../helpers';\nimport {\n  IAbstractModel,\n  IAlationEntity,\n  IAlationUpdateBase,\n  ICreateData,\n  ICreateKey,\n  ICreateRecord,\n  IEditCustomFieldValue,\n  IEditCustomFieldValueRequest,\n  IEditCustomFieldValueResponse,\n  IJob,\n  IJobFinish,\n  IPageResponse,\n  IRequestConfig,\n  IUpdateResponse,\n} from '../interfaces';\nimport {AlationEntityId, AlationKey, Flag} from '../types';\n\nexport abstract class AbstractModel<Entity extends IAlationEntity, Update extends IAlationUpdateBase, CreateKey extends ICreateKey>\nimplements IAbstractModel<Entity, Update, CreateKey> {\n  protected core: Alation;\n  protected apiClient: AxiosInstance;\n  protected entityType: AlationEntityType;\n\n  protected constructor(core: Alation, apiClient: AxiosInstance, entityType: AlationEntityType) {\n    this.core = core;\n    this.apiClient = apiClient;\n    this.entityType = entityType;\n  }\n\n  async getById<E extends Entity = Entity>(id: AlationEntityId): Promise<E | null> {\n    try {\n      const {data} = await this.apiClient.get<E[]>(ALATION_CATALOG_ROUTE[this.entityType], {params: {id}});\n\n      return data.length ? data[0] : null;\n    } catch (error) {\n      console.error('CODE00000300 getById(): ' + error?.message);\n      return null;\n    }\n  }\n\n  async update<U extends IAlationUpdateBase = Update>(records: U, limit?: number): Promise<IUpdateResponse>;\n  async update<U extends IAlationUpdateBase = Update>(records: U[], limit?: number): Promise<IUpdateResponse>;\n  async update<U extends IAlationUpdateBase = Update>(records: U[] | U, limit = 100): Promise<IUpdateResponse> {\n    try {\n      if (Array.isArray(records)) {\n        const pages = sliceCollection(prepareApiBody<U>(records), limit);\n        let response: IUpdateResponse = {\n          new_objects: 0,\n          updated_objects: 0,\n          number_received: 0,\n          error: '',\n          error_objects: [],\n        };\n        for (const page of pages) {\n          const {data} = await this.apiClient.post<IUpdateResponse>(ALATION_UPDATE_ROUTE[this.entityType], page.join('\\n'));\n          response = {\n            new_objects: response.new_objects + data.new_objects,\n            updated_objects: response.updated_objects + data.updated_objects,\n            number_received: response.number_received + data.number_received,\n            error: response.error + data.error,\n            error_objects: [...response.error_objects, ...data.error_objects],\n          };\n        }\n\n        return response;\n      } else {\n        const body = prepareApiBody<U>(records);\n        const {data} = await this.apiClient.post<IUpdateResponse>(ALATION_UPDATE_ROUTE[this.entityType], body);\n        return data;\n      }\n    } catch (error) {\n      console.error('CODE00000301 update(): ' + error?.message);\n      throw error;\n    }\n  }\n\n  async search<S, E extends Entity>(config: S): Promise<IPageResponse<E>>;\n  async search<S, E extends Entity>(config: S, all: Flag): Promise<Array<E>>;\n  async search<S, E extends Entity>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<S, E extends Entity>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<S, E extends Entity>(config: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    try {\n      if (typeof limit === 'boolean' && limit) {\n        return this.getAllData<E>({\n          url: ALATION_CATALOG_ROUTE[this.entityType],\n          method: 'get',\n          params: config,\n        });\n      }\n      if (typeof limit === 'number' && limit > 0) {\n        if (typeof all === 'boolean' && all) {\n          return this.getAllData<E>({\n            url: ALATION_CATALOG_ROUTE[this.entityType],\n            method: 'get',\n            params: {...config, limit},\n          });\n        }\n        return this.getPagesData<E>({\n          url: ALATION_CATALOG_ROUTE[this.entityType],\n          method: 'get',\n          params: {...config, limit},\n        });\n      }\n      return this.getPagesData<E>({\n        url: ALATION_CATALOG_ROUTE[this.entityType],\n        method: 'get',\n        params: config,\n      });\n    } catch (error) {\n      console.error('CODE00000302 search(): ' + error?.message);\n      return [];\n    }\n  }\n\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, key: K, data: D): Promise<IJob>;\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, key: K, data: D, wait: Flag): Promise<IJobFinish>;\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[]): Promise<IJob>;\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], wait: Flag): Promise<IJobFinish>;\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], limit: number): Promise<IJob[]>;\n  async create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], limit: number, wait: Flag): Promise<IJobFinish[]>;\n  async create<K extends CreateKey, D extends ICreateData>(\n      dsId: number, key: K | ICreateRecord<K, D>[], data?: D | Flag | number, wait?: Flag): Promise<IJob | IJobFinish | IJob[] | IJobFinish[]> {\n    try {\n      if (!Array.isArray(key)) {\n        const entityKey = this.makeEntityKey(dsId, key);\n        const entityData = data as D;\n\n        const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), JSON.stringify({key: entityKey, ...entityData}));\n\n        return wait ? this.core.getJobResult(job) : job;\n      } else {\n        const paramsCollection = key.map<string>(({key: k, data: d}) => (JSON.stringify({\n          key: this.makeEntityKey(dsId, k),\n          ...d,\n        })));\n        if (typeof data === 'boolean') {\n          const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), paramsCollection.join('\\n'));\n          return this.core.getJobResult(job);\n        }\n        const pages = sliceCollection<string>(paramsCollection, data as number);\n\n        const jobCollection: Array<IJob> = [];\n        for (const page of pages) {\n          const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), page.join('\\n'));\n          jobCollection.push(job);\n        }\n\n        if (typeof wait === 'boolean') {\n          return await Promise.all<IJobFinish>(jobCollection.map<Promise<IJobFinish>>((job) => (this.core.getJobResult(job))));\n        } else {\n          return jobCollection;\n        }\n      }\n    } catch (e) {\n      console.error('CODE00000303 create(): ', e?.message);\n      throw e;\n    }\n  }\n\n  protected abstract makeEntityKey(datasourceId: number, key: CreateKey): AlationKey;\n\n  protected async getAllData<E extends Entity = Entity>(config: IRequestConfig): Promise<Array<E>> {\n    try {\n      const result: Array<E> = [];\n\n      let response = await this.getPagesData<E>(config);\n      result.push(...response.values);\n\n      while (response.next) {\n        response = await response.next();\n        result.push(...response.values);\n      }\n\n      return result;\n    } catch (e) {\n      console.error('CODE00000304 getAllData(): ', e?.message);\n      throw e;\n    }\n  }\n\n  protected async getPagesData<E extends Entity = Entity>(config: IRequestConfig): Promise<IPageResponse<E>> {\n    try {\n      const response = await (this.apiClient(config) as AxiosPromise<E[]>);\n      const next: string | undefined = response.headers[ALATION_NEXT_PAGE_HEADER_KEY];\n\n      return {\n        values: response.data,\n        next: next ? () => (this.getPagesData({...config, url: next})) : null,\n      };\n    } catch (e) {\n      console.error('CODE00000305 getPagesData(): ', e?.message);\n      throw e;\n    }\n  }\n\n  async updateCustomFields<V = any>(body: IEditCustomFieldValueRequest<V>): Promise<IEditCustomFieldValueResponse>;\n  async updateCustomFields<V = any>(body: IEditCustomFieldValueRequest<V>[]): Promise<IEditCustomFieldValueResponse>;\n  async updateCustomFields<V = any>(body: IEditCustomFieldValueRequest<V> | IEditCustomFieldValueRequest<V>[]): Promise<IEditCustomFieldValueResponse> {\n    try {\n      const otype = OBJECT_TYPE[this.entityType];\n      let params: string;\n      if (!Array.isArray(body)) {\n        params = JSON.stringify(({...body, otype} as IEditCustomFieldValue));\n      } else {\n        params = body.map<string>((record) => JSON.stringify(({...record, otype} as IEditCustomFieldValue))).join('\\n');\n      }\n      const {data} = await this.apiClient.post<IEditCustomFieldValueResponse>(CUSTOM_FIELD_VALUE_EDIT_ROUTE, params);\n      return data;\n    } catch (e) {\n      console.error('CODE00000306 updateCustomFields(): ' + e?.message);\n      throw e;\n    }\n  }\n}\n\n\n"],"file":"AbstractModel.js"}