{"version":3,"sources":["../../src/index.ts"],"names":["Alation","AlationConnector","constructor","userData","host","options","Datasource","DatasourceModel","apiClient","Schema","SchemaModel","Table","TableModel","Attribute","AttributeModel","getJobState","job","data","get","ALATION_JOB_STATE_ROUTE","params","name","job_name","status","JobStatusEnum","RUNNING","result","JSON","parse","e","console","error","message","getJobResult","interval","jobInterval","response"],"mappings":";;;;;;;;;;AAAA;;AAiEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApDA;;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/CA;;AACA;;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9CA;;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7CO,MAAMA,OAAN,SAGyDC,yBAHzD,CAG0E;AAO/EC,EAAAA,WAAW,CAACC,QAAD,EAAiCC,IAAjC,EAA+CC,OAA/C,EAA2E;AACpF,UAAMF,QAAN,EAAgBC,IAAhB,EAAsBC,OAAtB;AACA,SAAKC,UAAL,GAAkB,IAAIC,uBAAJ,CAAsC,IAAtC,EAA4C,KAAKC,SAAjD,CAAlB;AACA,SAAKC,MAAL,GAAc,IAAIC,mBAAJ,CAAkD,IAAlD,EAAwD,KAAKF,SAA7D,CAAd;AACA,SAAKG,KAAL,GAAa,IAAIC,kBAAJ,CAA+C,IAA/C,EAAqD,KAAKJ,SAA1D,CAAb;AACA,SAAKK,SAAL,GAAiB,IAAIC,sBAAJ,CAA2D,IAA3D,EAAiE,KAAKN,SAAtE,CAAjB;AACD;;AAEgB,QAAXO,WAAW,CAACC,GAAD,EAAgC;AAC/C,QAAI;AACF,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAM,KAAKT,SAAL,CAAeU,GAAf,CAAkCC,kCAAlC,EAA2D;AAACC,QAAAA,MAAM,EAAE;AAACC,UAAAA,IAAI,EAAEL,GAAG,CAACM;AAAX;AAAT,OAA3D,CAArB;AACA,aAAO,EAAC,GAAGL,IAAJ;AAAU,YAAIA,IAAI,CAACM,MAAL,KAAgBC,qBAAcC,OAA9B,GAAwC;AAACC,UAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWX,IAAI,CAACS,MAAhB;AAAT,SAAxC,GAA4E,EAAhF;AAAV,OAAP;AACD,KAHD,CAGE,OAAOG,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,CAA9C,aAA8CA,CAA9C,uBAA8CA,CAAC,CAAEG,OAAjD;AACA,YAAMH,CAAN;AACD;AACF;;AAEiB,QAAZI,YAAY,CAACjB,GAAD,EAAYkB,QAAQ,GAAG,KAAK7B,OAAL,CAAa8B,WAApC,EAAsE;AACtF,QAAI;AACF,UAAIC,QAAQ,GAAG,MAAM,KAAKrB,WAAL,CAAiBC,GAAjB,CAArB;;AACA,aAAOoB,QAAQ,CAACb,MAAT,KAAoB,SAA3B,EAAsC;AACpC,cAAM,oBAAMW,QAAN,CAAN;AACAE,QAAAA,QAAQ,GAAG,MAAM,KAAKrB,WAAL,CAAiBC,GAAjB,CAAjB;AACD;;AACD,aAAOoB,QAAP;AACD,KAPD,CAOE,OAAOP,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd,EAA+CF,CAA/C,aAA+CA,CAA/C,uBAA+CA,CAAC,CAAEG,OAAlD;AACA,YAAMH,CAAN;AACD;AACF;;AArC8E","sourcesContent":["import {\n  AttributeModel,\n  DatasourceModel,\n  IAttribute,\n  IAttributeUpdate,\n  IDatasource,\n  ISchema,\n  ISchemaUpdate,\n  ITable,\n  ITableUpdate,\n  SchemaModel,\n  TableModel,\n} from './models';\nimport {AlationConnector, IConnectorOptions} from './classes';\nimport {IConnectorAuthConfig, IJob, IJobFinish, IJobSerialize, IJobState} from './interfaces';\nimport {ALATION_JOB_STATE_ROUTE} from './constants';\nimport {sleep} from './helpers';\nimport {JobStatusEnum} from './types';\n\nexport class Alation<AttributeEntity extends IAttribute = IAttribute, AttributeEntityUpdate extends IAttributeUpdate = IAttributeUpdate,\n    TableEntity extends ITable = ITable, TableEntityUpdate extends ITableUpdate = ITableUpdate,\n    SchemaEntity extends ISchema = ISchema, SchemaEntityUpdate extends ISchemaUpdate = ISchemaUpdate,\n    DatasourceEntity extends IDatasource = IDatasource> extends AlationConnector {\n  public readonly Datasource: DatasourceModel<DatasourceEntity>;\n  public readonly Schema: SchemaModel<SchemaEntity, SchemaEntityUpdate>;\n  public readonly Table: TableModel<TableEntity, TableEntityUpdate>;\n  public readonly Attribute: AttributeModel<AttributeEntity, AttributeEntityUpdate>;\n\n\n  constructor(userData: IConnectorAuthConfig, host: string, options?:IConnectorOptions) {\n    super(userData, host, options);\n    this.Datasource = new DatasourceModel<DatasourceEntity>(this, this.apiClient);\n    this.Schema = new SchemaModel<SchemaEntity, SchemaEntityUpdate>(this, this.apiClient);\n    this.Table = new TableModel<TableEntity, TableEntityUpdate>(this, this.apiClient);\n    this.Attribute = new AttributeModel<AttributeEntity, AttributeEntityUpdate>(this, this.apiClient);\n  }\n\n  async getJobState(job: IJob): Promise<IJobState> {\n    try {\n      const {data} = await this.apiClient.get<IJobSerialize>(ALATION_JOB_STATE_ROUTE, {params: {name: job.job_name}});\n      return {...data, ...(data.status !== JobStatusEnum.RUNNING ? {result: JSON.parse(data.result)} : {})};\n    } catch (e) {\n      console.error('CODE00000100 getJobState(): ', e?.message);\n      throw e;\n    }\n  }\n\n  async getJobResult(job: IJob, interval = this.options.jobInterval): Promise<IJobFinish> {\n    try {\n      let response = await this.getJobState(job);\n      while (response.status === 'running') {\n        await sleep(interval);\n        response = await this.getJobState(job);\n      }\n      return response as IJobFinish;\n    } catch (e) {\n      console.error('CODE00000101 getJobResult(): ', e?.message);\n      throw e;\n    }\n  }\n}\n\nexport * from './classes';\nexport * from './helpers';\nexport * from './interfaces';\nexport * from './models';\nexport * from './types';\n"],"file":"index.js"}