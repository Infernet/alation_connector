{"version":3,"sources":["../../../src/helpers/index.ts"],"names":["prepareApiBody","records","Array","isArray","map","r","JSON","stringify","sleep","timeout","Promise","resolve","setTimeout","sliceCollection","array","size","result","i","Math","ceil","length","slice"],"mappings":";;;;;;;;;AAIO,SAASA,cAAT,CAAsDC,OAAtD,EAA2F;AAChG,MAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AAC1B,WAAOA,OAAO,CAACG,GAAR,CAAaC,CAAD,IAAOC,IAAI,CAACC,SAAL,CAAeF,CAAf,CAAnB,CAAP;AACD;;AAED,SAAOC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAP;AACD;;AAEM,eAAeO,KAAf,CAAqBC,OAArB,EAAqD;AAC1D,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAV;AACD,GAFM,CAAP;AAGD;;AAEM,SAASI,eAAT,CAAkCC,KAAlC,EAA8CC,IAA9C,EAAmE;AACxE,QAAMC,MAAa,GAAG,EAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACM,MAAN,GAAeL,IAAzB,CAApB,EAAoDE,CAAC,EAArD,EAAyD;AACvDD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,KAAK,CAACO,KAAN,CAAaJ,CAAC,GAAGF,IAAjB,EAAyBE,CAAC,GAAGF,IAAL,GAAaA,IAArC,CAAZ;AACD;;AAED,SAAOC,MAAP;AACD","sourcesContent":["import {IAlationUpdateBase} from '../interfaces';\n\nexport function prepareApiBody<T extends IAlationUpdateBase>(records: T): string;\nexport function prepareApiBody<T extends IAlationUpdateBase>(records: T[]): string[];\nexport function prepareApiBody<T extends IAlationUpdateBase>(records: T[] | T): string[] | string {\n  if (Array.isArray(records)) {\n    return records.map((r) => JSON.stringify(r));\n  }\n\n  return JSON.stringify(records);\n}\n\nexport async function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n}\n\nexport function sliceCollection<T = any>(array: T[], size: number): T[][] {\n  const result: T[][] = [];\n\n  for (let i = 0; i < Math.ceil(array.length / size); i++) {\n    result[i] = array.slice((i * size), (i * size) + size);\n  }\n\n  return result;\n}\n"],"file":"index.js"}