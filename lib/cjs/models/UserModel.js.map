{"version":3,"sources":["../../../src/models/UserModel.ts"],"names":["UserModel","constructor","jobModel","apiClient","core","getById","id","data","get","USER_URL","error","console","message","search","config","limit","all","getAllData","url","method","params","getPagesData"],"mappings":";;;;;;;AAGO,MAAMA,SAAN,CACuC;AAI5CC,EAAAA,WAAW,CAACC,QAAD,EAAmBC,SAAnB,EAA6C;AACtD,SAAKC,IAAL,GAAYF,QAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEY,QAAPE,OAAO,CAA4BC,EAA5B,EAAoE;AAC/E,QAAI;AACF,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAM,KAAKJ,SAAL,CAAeK,GAAf,CAAuB,GAAEC,QAAS,IAAGH,EAAG,GAAxC,CAArB;AAEA,aAAOC,IAAI,IAAI,IAAf;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAA6BA,KAA7B,aAA6BA,KAA7B,uBAA6BA,KAAK,CAAEE,OAApC,CAAd;AACA,aAAO,IAAP;AACD;AACF;;AAMW,QAANC,MAAM,CAAuDC,MAAvD,EAAmEC,KAAnE,EAA0FC,GAA1F,EAAuI;AACjJ,QAAI;AACF,UAAI,CAACF,MAAL,EAAa;AACX,eAAO,KAAKV,IAAL,CAAUa,UAAV,CAAqB;AAC1BC,UAAAA,GAAG,EAAET,QADqB;AAE1BU,UAAAA,MAAM,EAAE;AAFkB,SAArB,CAAP;AAID;;AACD,UAAI,OAAOJ,KAAP,KAAiB,SAAjB,IAA8BA,KAAlC,EAAyC;AACvC,eAAO,KAAKX,IAAL,CAAUa,UAAV,CAAqB;AAC1BC,UAAAA,GAAG,EAAET,QADqB;AAE1BU,UAAAA,MAAM,EAAE,KAFkB;AAG1BC,UAAAA,MAAM,EAAEN;AAHkB,SAArB,CAAP;AAKD;;AACD,UAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C,YAAI,OAAOC,GAAP,KAAe,SAAf,IAA4BA,GAAhC,EAAqC;AACnC,iBAAO,KAAKZ,IAAL,CAAUa,UAAV,CAAqB;AAC1BC,YAAAA,GAAG,EAAET,QADqB;AAE1BU,YAAAA,MAAM,EAAE,KAFkB;AAG1BC,YAAAA,MAAM,EAAE,EAAC,GAAGN,MAAJ;AAAYC,cAAAA;AAAZ;AAHkB,WAArB,CAAP;AAKD;;AACD,eAAO,KAAKX,IAAL,CAAUiB,YAAV,CAAuB;AAC5BH,UAAAA,GAAG,EAAET,QADuB;AAE5BU,UAAAA,MAAM,EAAE,KAFoB;AAG5BC,UAAAA,MAAM,EAAE,EAAC,GAAGN,MAAJ;AAAYC,YAAAA;AAAZ;AAHoB,SAAvB,CAAP;AAKD;;AACD,aAAO,KAAKX,IAAL,CAAUiB,YAAV,CAAuB;AAC5BH,QAAAA,GAAG,EAAET,QADuB;AAE5BU,QAAAA,MAAM,EAAE,KAFoB;AAG5BC,QAAAA,MAAM,EAAEN;AAHoB,OAAvB,CAAP;AAKD,KAjCD,CAiCE,OAAOJ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAA4BA,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAEE,OAAnC,CAAd;AACA,aAAO,EAAP;AACD;AACF;;AA9D2C;;;AAiF9C,MAAMH,QAAQ,GAAG,sBAAjB","sourcesContent":["import {AlationEntityId, Flag, IAlationEntity, IModel, IPageResponse} from 'src';\nimport {AxiosInstance} from 'axios';\n\nexport class UserModel<Entity extends IUser = IUser,\n    Search extends IUserSearch = IUserSearch> {\n  protected core: IModel;\n  protected apiClient: AxiosInstance;\n\n  constructor(jobModel: IModel, apiClient: AxiosInstance) {\n    this.core = jobModel;\n    this.apiClient = apiClient;\n  }\n\n  async getById<E extends Entity = Entity>(id: AlationEntityId): Promise<E | null> {\n    try {\n      const {data} = await this.apiClient.get<E>(`${USER_URL}/${id}/`);\n\n      return data ?? null;\n    } catch (error) {\n      console.error('CODE00000400 getById(): ' + error?.message);\n      return null;\n    }\n  }\n\n  async search<E extends Entity = Entity, S extends Search = Search>(config?: S): Promise<IPageResponse<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, all: Flag): Promise<Array<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<E extends Entity = Entity, S extends Search = Search>(config?: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    try {\n      if (!config) {\n        return this.core.getAllData({\n          url: USER_URL,\n          method: 'get',\n        });\n      }\n      if (typeof limit === 'boolean' && limit) {\n        return this.core.getAllData({\n          url: USER_URL,\n          method: 'get',\n          params: config,\n        });\n      }\n      if (typeof limit === 'number' && limit > 0) {\n        if (typeof all === 'boolean' && all) {\n          return this.core.getAllData({\n            url: USER_URL,\n            method: 'get',\n            params: {...config, limit},\n          });\n        }\n        return this.core.getPagesData({\n          url: USER_URL,\n          method: 'get',\n          params: {...config, limit},\n        });\n      }\n      return this.core.getPagesData({\n        url: USER_URL,\n        method: 'get',\n        params: config,\n      });\n    } catch (error) {\n      console.error('CODE00000402 search(): ' + error?.message);\n      return [];\n    }\n  }\n}\n\nexport interface IUser extends IAlationEntity {\n  'display_name': string;\n  'email': string;\n  'id': AlationEntityId;\n  'profile_id': AlationEntityId;\n  'url': string;\n}\n\nexport interface IUserSearch {\n  'display_name'?: string;\n  'email'?: string;\n  'id'?: AlationEntityId;\n  'profile_id'?: AlationEntityId;\n  'url'?: string;\n}\n\nconst USER_URL = '/integration/v1/user';\n"],"file":"UserModel.js"}