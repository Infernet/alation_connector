{"version":3,"sources":["../../../src/interfaces/index.ts"],"names":[],"mappings":"AAQA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {AxiosRequestConfig, Method} from 'axios';\nimport {ICreateData, ICreateKey, ICreateRecord} from './create';\nimport {AlationEntityId, Flag} from '../types';\nimport {IJob, IJobFinish} from './job';\nimport {IAlationEntity} from './entity';\nimport {IAlationUpdateBase, IUpdateResponse} from './update';\nimport {IEditCustomFieldValueRequest, IEditCustomFieldValueResponse} from './custom_field';\n\nexport * from './connector';\nexport * from './create';\nexport * from './entity';\nexport * from './job';\nexport * from './update';\nexport * from './custom_field';\n\nexport interface IRequestConfig extends AxiosRequestConfig {\n  url: string;\n  method: Method;\n}\n\nexport interface IPageResponse<Values extends IAlationEntity> {\n  values: Array<Values>;\n  next: (() => Promise<IPageResponse<Values>>) | null;\n}\n\nexport interface IAbstractModel<Entity extends IAlationEntity, Update extends IAlationUpdateBase, CreateKey extends ICreateKey> {\n  updateCustomFields<Value = any>(body: IEditCustomFieldValueRequest<Value>): Promise<IEditCustomFieldValueResponse>;\n  updateCustomFields<Value = any>(body: IEditCustomFieldValueRequest<Value>[]): Promise<IEditCustomFieldValueResponse>;\n\n  getById<E extends Entity = Entity>(id: AlationEntityId): Promise<E | null>;\n\n  search<S, E extends Entity = Entity>(params: S): Promise<IPageResponse<E>>;\n  search<S, E extends Entity = Entity>(params: S, all: Flag): Promise<Array<E>>;\n  search<S, E extends Entity = Entity>(params: S, limit: number): Promise<IPageResponse<E>>;\n  search<S, E extends Entity = Entity>(params: S, limit: number, all: Flag): Promise<Array<E>>;\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, key: K, data: D): Promise<IJob>;\n\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, key: K, data: D, wait: Flag): Promise<IJobFinish>;\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[]): Promise<IJob>;\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], wait: Flag): Promise<IJobFinish>;\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], limit: number): Promise<IJob[]>;\n  create<K extends CreateKey, D extends ICreateData>(dsId: number, entities: ICreateRecord<K, D>[], limit: number, wait: Flag): Promise<IJobFinish[]>;\n\n  update<U extends IAlationUpdateBase = Update>(records: U, limit?: number): Promise<IUpdateResponse>;\n  update<U extends IAlationUpdateBase = Update>(records: U[], limit?: number): Promise<IUpdateResponse>;\n}\n"],"file":"index.js"}