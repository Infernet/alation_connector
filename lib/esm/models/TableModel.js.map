{"version":3,"sources":["../../../src/models/TableModel.ts"],"names":["AbstractModel","TableModel","constructor","core","apiClient","getById","bind","search","create","update","makeEntityKey","getAllData","getPagesData","config","limit","all","dsId","key","data","wait","Array","isArray","datasourceId","schema_name","name"],"mappings":"AAAA,SAAQA,aAAR;AAMA,OAAO,MAAMC,UAAN,SACGD,aADH,CAC4C;AACjDE,EAAAA,WAAW,CAACC,IAAD,EAAgBC,SAAhB,EAA0C;AACnD,UAAMD,IAAN,EAAYC,SAAZ,EAAuB,OAAvB,EADmD,CAGnD;;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd,CAPmD,CAQnD;;AACA,SAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKK,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKM,YAAL,GAAoB,KAAKA,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAMW,QAANC,MAAM,CAA0DM,MAA1D,EAAqEC,KAArE,EAA4FC,GAA5F,EAAyI;AACnJ,QAAI,OAAOD,KAAP,KAAiB,SAAjB,IAA8BA,KAAlC,EAAyC;AACvC,aAAO,MAAMP,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,CAAP;AACD;;AACD,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C,UAAI,OAAOC,GAAP,KAAe,SAAf,IAA4BA,GAAhC,EAAqC;AACnC,eAAO,MAAMR,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,EAAkCC,GAAlC,CAAP;AACD;;AACD,aAAO,MAAMR,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,CAAP;AACD;;AACD,WAAO,MAAMP,MAAN,CAAmBM,MAAnB,CAAP;AACD;;AAQW,QAANL,MAAM,CACRQ,IADQ,EAERC,GAFQ,EAGRC,IAHQ,EAIRC,IAJQ,EAIyD;AACnE,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAL,EAAyB;AACvB,UAAI,OAAOE,IAAP,KAAgB,SAAhB,IAA6BA,IAAjC,EAAuC;AACrC,eAAO,MAAMX,MAAN,CAAmBQ,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAyCC,IAAzC,CAAP;AACD;;AACD,aAAO,MAAMX,MAAN,CAAmBQ,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,CAAP;AACD;;AACD,QAAI,OAAOA,IAAP,KAAgB,SAAhB,IAA6BA,IAAjC,EAAuC;AACrC,aAAO,MAAMV,MAAN,CAAmBQ,IAAnB,EAAyBC,GAAzB,EAA8BC,IAA9B,CAAP;AACD;;AACD,QAAI,OAAOC,IAAP,KAAgB,SAAhB,IAA6BA,IAAjC,EAAuC;AACrC,aAAO,MAAMX,MAAN,CAAmBQ,IAAnB,EAAyBC,GAAzB,EAA+BC,IAA/B,EAAgDC,IAAhD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMX,MAAN,CAAmBQ,IAAnB,EAAyBC,GAAzB,EAA+BC,IAA/B,CAAP;AACD;AACF;;AAESR,EAAAA,aAAa,CAACY,YAAD,EAAuBL,GAAvB,EAAmD;AACxE,WAAQ,GAAEK,YAAa,IAAGL,GAAG,CAACM,WAAY,IAAGN,GAAG,CAACO,IAAK,EAAtD;AACD;;AA7DgD","sourcesContent":["import {AbstractModel} from '../classes';\nimport {Alation} from '../index';\nimport {AxiosInstance} from 'axios';\nimport {AlationEntityId, AlationKey, Flag} from '../types';\nimport {IAlationEntity, IAlationUpdateBase, ICreateData, ICreateKey, ICreateRecord, ICustomField, IJob, IJobFinish, IPageResponse} from '../interfaces';\n\nexport class TableModel<Entity extends ITable = ITable, Update extends ITableUpdate = ITableUpdate>\n  extends AbstractModel<Entity, Update, ITableKey> {\n  constructor(core: Alation, apiClient: AxiosInstance) {\n    super(core, apiClient, 'table');\n\n    // публичные методы\n    this.getById = this.getById.bind(this);\n    this.search = this.search.bind(this);\n    this.create = this.create.bind(this);\n    this.update = this.update.bind(this);\n    // вспомогательные методы\n    this.makeEntityKey = this.makeEntityKey.bind(this);\n    this.getAllData = this.getAllData.bind(this);\n    this.getPagesData = this.getPagesData.bind(this);\n  }\n\n  async search<S extends ITableSearchParams, E extends Entity = Entity>(config: S): Promise<IPageResponse<E>>;\n  async search<S extends ITableSearchParams, E extends Entity = Entity>(config: S, all: Flag): Promise<Array<E>>;\n  async search<S extends ITableSearchParams, E extends Entity = Entity>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<S extends ITableSearchParams, E extends Entity = Entity>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<S extends ITableSearchParams, E extends Entity = Entity>(config: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    if (typeof limit === 'boolean' && limit) {\n      return super.search<S, E>(config, limit);\n    }\n    if (typeof limit === 'number' && limit > 0) {\n      if (typeof all === 'boolean' && all) {\n        return super.search<S, E>(config, limit, all);\n      }\n      return super.search<S, E>(config, limit);\n    }\n    return super.search<S, E>(config);\n  }\n\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, key: K, data: D): Promise<IJob>;\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, key: K, data: D, wait: Flag): Promise<IJobFinish>;\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, entities: ICreateRecord<K, D>[]): Promise<IJob>;\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, entities: ICreateRecord<K, D>[], wait: Flag): Promise<IJobFinish>;\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, entities: ICreateRecord<K, D>[], limit: number): Promise<IJob[]>;\n  async create<K extends ITableKey, D extends ITableCreate>(dsId: number, entities: ICreateRecord<K, D>[], limit: number, wait: Flag): Promise<IJobFinish[]>;\n  async create<K extends ITableKey, D extends ITableCreate>(\n      dsId: number,\n      key: K | ICreateRecord<K, D>[],\n      data?: D | Flag | number,\n      wait?: Flag): Promise<IJob | IJobFinish | IJob[] | IJobFinish[]> {\n    if (!Array.isArray(key)) {\n      if (typeof wait === 'boolean' && wait) {\n        return super.create<K, D>(dsId, key, data as D, wait);\n      }\n      return super.create<K, D>(dsId, key, data as D);\n    }\n    if (typeof data === 'boolean' && data) {\n      return super.create<K, D>(dsId, key, data);\n    }\n    if (typeof wait === 'boolean' && wait) {\n      return super.create<K, D>(dsId, key, (data as number), wait);\n    } else {\n      return super.create<K, D>(dsId, key, (data as number));\n    }\n  }\n\n  protected makeEntityKey(datasourceId: number, key: ITableKey): AlationKey {\n    return `${datasourceId}.${key.schema_name}.${key.name}`;\n  }\n}\n\nexport interface ITable<CustomFields extends ICustomField = ICustomField> extends IAlationEntity<CustomFields> {\n  'ds_id': AlationEntityId;\n  'schema_id': AlationEntityId;\n  'db_table_type': null | string;\n  'is_view': boolean;\n  'is_synonym': boolean;\n  'name': string;\n  'schema_name': string;\n  'synonyms': null | string;\n  'base_table': null | string;\n  'db_comment': null | string;\n}\n\nexport interface ITableUpdate<CustomFields extends ICustomField = ICustomField> extends IAlationUpdateBase {\n  'title'?: string;\n  'name'?: string;\n  'description'?: string;\n  'data_type'?: string;\n  'db_comment'?: string | null;\n  'is_primary_key'?: boolean;\n  'is_foreign_key'?: boolean;\n  'nullable'?: boolean;\n  'db_table_type'?: null | string;\n  'is_view'?: boolean;\n  'is_synonym'?: boolean;\n  'synonyms'?: null | string;\n  'base_table'?: null | string;\n  'custom_fields'?: CustomFields[];\n}\n\nexport interface ITableKey extends ICreateKey {\n  'schema_name': string;\n  'name': string;\n}\n\nexport type ITableSearchParams = {\n  'id'?: AlationEntityId;\n  'ds_id'?: number;\n  'schema_id'?: number;\n  'schema_name'?: string;\n  'title'?: string;\n  'name'?: string;\n}\n\nexport type ITableCreate<CustomFields extends ICustomField = ICustomField> = ICreateData & Omit<ITableUpdate<CustomFields>, 'key'>;\n"],"file":"TableModel.js"}