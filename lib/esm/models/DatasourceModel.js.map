{"version":3,"sources":["../../../src/models/DatasourceModel.ts"],"names":["AbstractModel","DatasourceModel","constructor","core","apiClient","getById","bind","search","create","update","makeEntityKey","getAllData","getPagesData","config","limit","all","Error"],"mappings":"AAAA,SAAQA,aAAR;AAMA,OAAO,MAAMC,eAAN,SAAwED,aAAxE,CAA4G;AACjHE,EAAAA,WAAW,CAACC,IAAD,EAAgBC,SAAhB,EAA0C;AACnD,UAAMD,IAAN,EAAYC,SAAZ,EAAuB,YAAvB,EADmD,CAGnD;;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd,CAPmD,CAQnD;;AACA,SAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKK,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKM,YAAL,GAAoB,KAAKA,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAMW,QAANC,MAAM,CAA+DM,MAA/D,EAA0EC,KAA1E,EAAiGC,GAAjG,EAA8I;AACxJ,QAAI,OAAOD,KAAP,KAAiB,SAAjB,IAA8BA,KAAlC,EAAyC;AACvC,aAAO,MAAMP,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,CAAP;AACD;;AACD,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C,UAAI,OAAOC,GAAP,KAAe,SAAf,IAA4BA,GAAhC,EAAqC;AACnC,eAAO,MAAMR,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,EAAkCC,GAAlC,CAAP;AACD;;AACD,aAAO,MAAMR,MAAN,CAAmBM,MAAnB,EAA2BC,KAA3B,CAAP;AACD;;AACD,WAAO,MAAMP,MAAN,CAAmBM,MAAnB,CAAP;AACD;;AAGSH,EAAAA,aAAa,GAAU;AAC/B,UAAM,IAAIM,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAEW,QAANP,MAAM,GAAmB;AAC7B,UAAM,IAAIO,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAEW,QAANR,MAAM,GAAmB;AAC7B,UAAM,IAAIQ,KAAJ,CAAU,oCAAV,CAAN;AACD;;AA3CgH","sourcesContent":["import {AbstractModel} from '../classes';\nimport {Alation} from '../index';\nimport {AxiosInstance} from 'axios';\nimport {AlationEntityId, Flag} from '../types';\nimport {IAlationEntity, ICustomField, IPageResponse} from '../interfaces';\n\nexport class DatasourceModel<Entity extends IDatasource = IDatasource> extends AbstractModel<Entity, never, never> {\n  constructor(core: Alation, apiClient: AxiosInstance) {\n    super(core, apiClient, 'datasource');\n\n    // публичные методы\n    this.getById = this.getById.bind(this);\n    this.search = this.search.bind(this);\n    this.create = this.create.bind(this);\n    this.update = this.update.bind(this);\n    // вспомогательные методы\n    this.makeEntityKey = this.makeEntityKey.bind(this);\n    this.getAllData = this.getAllData.bind(this);\n    this.getPagesData = this.getPagesData.bind(this);\n  }\n\n  async search<S extends IDatasourceSearchParams, E extends Entity = Entity>(config: S): Promise<IPageResponse<E>>;\n  async search<S extends IDatasourceSearchParams, E extends Entity = Entity>(config: S, all: Flag): Promise<Array<E>>;\n  async search<S extends IDatasourceSearchParams, E extends Entity = Entity>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<S extends IDatasourceSearchParams, E extends Entity = Entity>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<S extends IDatasourceSearchParams, E extends Entity = Entity>(config: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    if (typeof limit === 'boolean' && limit) {\n      return super.search<S, E>(config, limit);\n    }\n    if (typeof limit === 'number' && limit > 0) {\n      if (typeof all === 'boolean' && all) {\n        return super.search<S, E>(config, limit, all);\n      }\n      return super.search<S, E>(config, limit);\n    }\n    return super.search<S, E>(config);\n  }\n\n\n  protected makeEntityKey(): never {\n    throw new Error('CODE00000400 method is not allowed');\n  }\n\n  async update(): Promise<never> {\n    throw new Error('CODE00000401 method is not allowed');\n  }\n\n  async create(): Promise<never> {\n    throw new Error('CODE00000402 method is not allowed');\n  }\n}\n\nexport interface IDatasource<CustomFields extends ICustomField = ICustomField> extends IAlationEntity<CustomFields> {\n  'is_virtual': boolean;\n  'uri': string;\n  'dbtype': string;\n}\n\nexport type IDatasourceSearchParams = {\n  'id'?: AlationEntityId;\n  'title'?: string;\n  'dbtype'?: string;\n  'is_virtual'?: boolean;\n  'uri'?: string;\n}\n"],"file":"DatasourceModel.js"}