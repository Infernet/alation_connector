{"version":3,"sources":["../../../src/models/AttributeModel.ts"],"names":["AbstractModel","alationCreateRoute","sliceCollection","AttributeModel","constructor","core","apiClient","getById","bind","search","create","update","makeEntityKey","getAllData","getPagesData","config","limit","all","dsId","key","data","wait","Array","isArray","requestData","JSON","stringify","makeTableEntityKey","join","job","post","getJobResult","map","k","d","flat","requestPages","page","formattedPage","record","push","jobCollection","request","Promise","datasourceId","name","schema_name","table_name"],"mappings":"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","sourcesContent":["import {AbstractModel} from '../classes';\nimport {Alation} from '..';\nimport {AxiosInstance} from 'axios';\nimport {AlationEntityId, AlationKey, Flag} from '../types';\nimport {IAlationEntity, IAlationUpdateBase, ICreateData, ICreateKey, ICreateRecord, ICustomField, IJob, IJobFinish, IPageResponse} from '../interfaces';\nimport {alationCreateRoute} from '../constants';\nimport {sliceCollection} from '../helpers';\n\nexport class AttributeModel<Entity extends IAttribute = IAttribute, Update extends IAttributeUpdate = IAttributeUpdate>\n  extends AbstractModel<Entity, Update, IAttributeKey> {\n  constructor(core: Alation, apiClient: AxiosInstance) {\n    super(core, apiClient, 'attribute');\n\n    // публичные методы\n    this.getById = this.getById.bind(this);\n    this.search = this.search.bind(this);\n    this.create = this.create.bind(this);\n    this.update = this.update.bind(this);\n    // вспомогательные методы\n    this.makeEntityKey = this.makeEntityKey.bind(this);\n    this.getAllData = this.getAllData.bind(this);\n    this.getPagesData = this.getPagesData.bind(this);\n  }\n\n  async search<S extends IAttributeSearchParams, E extends Entity = Entity>(config: S): Promise<IPageResponse<E>>;\n  async search<S extends IAttributeSearchParams, E extends Entity = Entity>(config: S, all: Flag): Promise<Array<E>>;\n  async search<S extends IAttributeSearchParams, E extends Entity = Entity>(config: S, limit: number): Promise<IPageResponse<E>>;\n  async search<S extends IAttributeSearchParams, E extends Entity = Entity>(config: S, limit: number, all: Flag): Promise<Array<E>>;\n  async search<S extends IAttributeSearchParams, E extends Entity = Entity>(config: S, limit?: Flag | number, all?: Flag): Promise<E[] | IPageResponse<E>> {\n    if (typeof limit === 'boolean' && limit) {\n      return super.search<S, E>(config, limit);\n    }\n    if (typeof limit === 'number' && limit > 0) {\n      if (typeof all === 'boolean' && all) {\n        return super.search<S, E>(config, limit, all);\n      }\n      return super.search<S, E>(config, limit);\n    }\n    return super.search<S, E>(config);\n  }\n\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, key: K, data: D): Promise<IJob>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, key: K, data: D, wait: Flag): Promise<IJobFinish>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, entities: ICreateRecord<K, D>[]): Promise<IJob>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, entities: ICreateRecord<K, D>[], wait: Flag): Promise<IJobFinish>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, entities: ICreateRecord<K, D>[], limit: number): Promise<IJob[]>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(dsId: number, entities: ICreateRecord<K, D>[], limit: number, wait: Flag):\n      Promise<IJobFinish[]>;\n  async create<K extends IAttributeKey, D extends IAttributeCreate>(\n      dsId: number,\n      key: K | ICreateRecord<K, D>[],\n      data?: D | Flag | number,\n      wait?: Flag): Promise<IJob | IJobFinish | IJob[] | IJobFinish[]> {\n    if (!Array.isArray(key)) {\n      const requestData = [\n        JSON.stringify({key: this.makeTableEntityKey(dsId, key)}),\n        JSON.stringify({key: this.makeEntityKey(dsId, key), ...(data as D)}),\n      ].join('\\n');\n\n      const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), requestData);\n\n      return wait ? this.core.getJobResult(job) : job;\n    } else {\n      if (typeof data !== 'number') {\n        const requestData = key.map<string[]>(({key: k, data: d}) => {\n          return [\n            JSON.stringify({key: this.makeTableEntityKey(dsId, k)}),\n            JSON.stringify({key: this.makeEntityKey(dsId, k), ...(d as D)}),\n          ];\n        }).flat().join('\\n');\n        const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), requestData);\n        if (typeof data === 'boolean' && data) {\n          return this.core.getJobResult(job);\n        }\n        return job;\n      }\n      const requestPages: string[] = [];\n\n      for (const page of sliceCollection<ICreateRecord<K, D>>(key, data)) {\n        const formattedPage: string[][] = [];\n        for (const record of page) {\n          formattedPage.push([\n            JSON.stringify({key: this.makeTableEntityKey(dsId, record.key)}),\n            JSON.stringify({key: this.makeEntityKey(dsId, record.key), ...record.data}),\n          ]);\n        }\n        requestPages.push(formattedPage.flat().join('\\n'));\n      }\n\n      const jobCollection: Array<IJob> = [];\n      for (const request of requestPages) {\n        const {data: job} = await this.apiClient.post<IJob>(alationCreateRoute(dsId), request);\n        jobCollection.push(job);\n      }\n\n      if (typeof wait === 'boolean' && wait) {\n        return await Promise.all<IJobFinish>(jobCollection.map<Promise<IJobFinish>>((job) => (this.core.getJobResult(job))));\n      }\n      return jobCollection;\n    }\n  }\n\n  protected makeEntityKey(datasourceId: number, key: IAttributeKey): AlationKey {\n    return `${this.makeTableEntityKey(datasourceId, key)}.${key.name}`;\n  }\n\n  protected makeTableEntityKey(datasourceId: number, key: IAttributeKey): AlationKey {\n    return `${datasourceId}.${key.schema_name}.${key.table_name}`;\n  }\n}\n\nexport interface IAttribute<CustomFields extends ICustomField = ICustomField> extends IAlationEntity<CustomFields> {\n  'name': string;\n  'ds_id': AlationEntityId;\n  'schema_id': AlationEntityId;\n  'table_id': AlationEntityId;\n  'table_name': string;\n  'data_type': string;\n  'db_comment': null | any;\n  'is_primary_key': boolean;\n  'is_foreign_key': boolean;\n  'nullable': boolean;\n}\n\nexport interface IAttributeUpdate<CustomFields extends ICustomField = ICustomField> extends IAlationUpdateBase {\n  'title'?: string;\n  'name'?: string;\n  'description'?: string;\n  'data_type'?: string;\n  'db_comment'?: string | null;\n  'is_primary_key'?: boolean;\n  'is_foreign_key'?: boolean;\n  'nullable'?: boolean;\n  'custom_fields'?: CustomFields[];\n}\n\nexport interface IAttributeKey extends ICreateKey {\n  'schema_name': string;\n  'table_name': string;\n  'name': string;\n}\n\nexport type IAttributeSearchParams = {\n  'id'?: AlationEntityId;\n  'ds_id'?: number;\n  'schema_id'?: number;\n  'table_id'?: number;\n  'title'?: string;\n  'name'?: string;\n  'schema_name'?: string;\n  'table_name'?: string;\n}\n\nexport type IAttributeCreate<CustomFields extends ICustomField = ICustomField> = ICreateData & Omit<IAttributeUpdate<CustomFields>, 'key'>;\n"],"file":"AttributeModel.js"}